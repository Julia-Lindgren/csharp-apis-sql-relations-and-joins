
- Normalise tables

CREATE TABLE IF NOT EXISTS writers (
    id SERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    email VARCHAR(255) NOT NULL UNIQUE
);

CREATE TABLE IF NOT EXISTS stars (
    id SERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    dob DATE NOT NULL
);


CREATE TABLE IF NOT EXISTS directors (
    id SERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    country VARCHAR(255) NOT NULL
);



CREATE TABLE IF NOT EXISTS films (
    id SERIAL PRIMARY KEY,
    title VARCHAR(255) NOT NULL,
    year INT NOT NULL,
    genre VARCHAR(255) NOT NULL,
    score INT NOT NULL,
    writer_id INT NOT NULL,
    star_id INT NOT NULL,
    director_id INT NOT NULL,
    FOREIGN KEY (writer_id) REFERENCES writers(id),
    FOREIGN KEY (star_id) REFERENCES stars(id),
    FOREIGN KEY (director_id) REFERENCES directors(id)
);

- Populate tables

INSERT INTO writers (name, email)
VALUES
    ('Arthur C Clarke', 'arthur@clarke.com'),
    ('George Lucas', 'george@email.com'),
    ('Harper Lee', 'harper@lee.com'),
    ('James Cameron', 'james@cameron.com'),
    ('Boris Pasternak', 'boris@boris.com'),
    ('Frederick Frank', 'fred@frank.com'),
    ('Theodoros Angelopoulos', 'theo@angelopoulos.com'),
    ('Erik Hazelhoff Roelfzema', 'erik@roelfzema.com'),
    ('Krzysztof Kieslowski', 'email@email.com'),
    ('Edmond Rostand', 'edmond@rostand.com');

INSERT INTO stars (name, dob)
VALUES
    ('Keir Dullea', '1936-05-30'),
    ('Mark Hamill', '1951-09-25'),
    ('Gregory Peck', '1916-04-05'),
    ('Leonardo DiCaprio', '1974-11-11'),
    ('Julie Christie', '1940-04-14'),
    ('Charlton Heston', '1923-04-10'),
    ('Manos Katrakis', '1908-08-14'),
    ('Rutger Hauer', '1944-01-23'),
    ('Juliette Binoche', '1964-09-03'),
    ('Gerard Depardieu', '1948-12-27');

INSERT INTO directors (name, country)
VALUES
    ('Stanley Kubrick', 'USA'),
    ('George Lucas', 'USA'),
    ('Robert Mulligan', 'USA'),
    ('James Cameron', 'Canada'),
    ('David Lean', 'UK'),
    ('Anthony Mann', 'USA'),
    ('Theodoros Angelopoulos', 'Greece'),
    ('Paul Verhoeven', 'Netherlands'),
    ('Krzysztof Kieslowski', 'Poland'),
    ('Jean-Paul Rappeneau', 'France');

INSERT INTO films (title, year, genre, score, writer_id, star_id, director_id)
VALUES
    ('2001: A Space Odyssey', 1968, 'Science Fiction', 10, 1, 1, 1),
    ('Star Wars: A New Hope', 1977, 'Science Fiction', 7, 2, 2, 2),
    ('To Kill A Mockingbird', 1962, 'Drama', 10, 3, 3, 3),
    ('Titanic', 1997, 'Romance', 5, 4, 4, 4),
    ('Dr Zhivago', 1965, 'Historical', 8, 5, 5, 5),
    ('El Cid', 1961, 'Historical', 6, 6, 6, 6),
    ('Voyage to Cythera', 1984, 'Drama', 8, 7, 7, 7),
    ('Soldier of Orange', 1977, 'Thriller', 8, 8, 8, 8),
    ('Three Colours: Blue', 1993, 'Drama', 8, 9, 9, 9),
    ('Cyrano de Bergerac', 1990, 'Historical', 9, 10, 10, 10);

1. Show the title and director name for all films
SELECT films.title, directors.name 
FROM films
JOIN directors ON films.director_id = directors.id;

2. Show the title, director and star name for all films
SELECT films.title, directors.name, stars.name
FROM films
JOIN directors ON films.director_id = directors.id
JOIN stars ON films.star_id = stars.id;

3. Show the title of films where the director is from the USA
SELECT films.title
FROM films
JOIN directors ON films.director_id = directors.id
WHERE directors.country = 'USA';

4. Show only those films where the writer and the director are the same person
SELECT films.title
FROM films
JOIN directors ON films.director_id = directors.id
JOIN writers ON films.writer_id = writers.id
WHERE directors.name = writers.name;

5. Show directors and film titles for films with a score of 8 or higher
SELECT films.title, directors.name
FROM films
JOIN directors ON films.director_id = directors.id
WHERE films.score >= 8;

6. Make at least 5 more queries to demonstrate your understanding of joins, and other relationships between tables.

I Show the names of the directors and movies that are in the historical genre
SELECT DISTINCT directors.name, films.title
FROM directors
JOIN films ON films.director_id = directors.id
WHERE films.genre = 'Historical';

II Show the average score of films for each director
SELECT directors.name, AVG(films.score) AS average_score
FROM films
JOIN directors ON films.director_id = directors.id
GROUP BY directors.name;

III Show films where the star name starts with M
SELECT films.title, stars.name
FROM films
JOIN stars ON films.star_id = stars.id
WHERE stars.name LIKE 'M%';

IV List all films along with the director's country
SELECT films.title, directors.country
FROM films
JOIN directors ON films.director_id = directors.id

V Show the number of films directed by country
SELECT directors.country, COUNT(films.id)
FROM films
JOIN directors ON films.director_id = directors.id
GROUP BY directors.country;